name: Create Global Infrastructure (Manual Workflow)

on:
  workflow_dispatch:
    branches:
      - main
    inputs:
      shouldCreateEKS:
        description: "Do you want to create EKS cluster?"
        type: boolean
      shouldCreateEFS:
        description: "Do you want to create EFS?"
        type: boolean
      shouldCreateALB:
        description: "Do you want to create ALB?"
        type: boolean

jobs:
  create-global-infrastructure:
    name: Create Global Infrastructure (Manual Workflow)
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.REGION}}

      - name: Install eksctl
        run: |
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH
          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          # (Optional) Verify checksum
          curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Create EKS Cluster
        if: inputs.shouldCreateEKS
        run: |
          eksctl create cluster -f <(echo '
             apiVersion: eksctl.io/v1alpha5
             kind: ClusterConfig

             metadata:
               name: ${{env.CLUSTER}}
               region: ${{env.REGION}}

             fargateProfiles:
               - name: fp-${{env.CLUSTER}}-${{env.NAMESPACE}}
                 selectors:
                   - namespace: ${{env.NAMESPACE}}
                   - namespace: kube-system
           ')

      - name: Create EFS & Dependencies
        if: inputs.shouldCreateEFS
        run: |
          eksctl utils write-kubeconfig --cluster ${{env.CLUSTER}} --region ${{env.REGION}}
          
          VPC_ID=$(aws eks describe-cluster --name ${{env.CLUSTER}} --query "cluster.resourcesVpcConfig.vpcId" --region ${{env.REGION}} --output text)
          CIDR_BLOCK=$(aws ec2 describe-vpcs --vpc-ids $VPC_ID --query "Vpcs[].CidrBlock" --region ${{env.REGION}} --output text)
          
          # EFS File System
          EFS_FS_ID=$(aws efs create-file-system \
            --creation-token efs-${{env.CLUSTER}} \
            --encrypted \
            --performance-mode generalPurpose \
            --throughput-mode bursting \
            --tags Key=Name,Value=efs-${{env.CLUSTER}} \
            --region ${{env.REGION}} \
            --output text \
            --query "FileSystemId")
          
          # Wait until EFS File System is available, with a maximum wait time of 150 seconds
            wait_time=0
            while [ $wait_time -lt 150 ]; do
              status=$(aws efs describe-file-systems \
              --file-system-id $EFS_FS_ID \
              --region ${REGION} \
              --output text \
              --query "FileSystems[0].LifeCycleState")
          
              if [ "$status" = "available" ]; then
                break
              else
                echo "Waiting for EFS File System to become available..."
                sleep 10  # Wait for 10 seconds before checking again
              wait_time=$((wait_time + 10))
              fi
            done

          echo "EFS File System created"

          # Security Group for File System for Inbound traffic
          EFS_SG_ID=$(aws ec2 create-security-group \
            --description "Security Group for File System for Inbound traffic" \
            --group-name eks-efs-${{env.CLUSTER}} \
            --vpc-id $VPC_ID \
            --region ${{env.REGION}} \
            --query 'GroupId' --output text)
          
          aws ec2 authorize-security-group-ingress \
            --group-id $EFS_SG_ID \
            --protocol tcp \
            --port 2049 \
            --cidr $CIDR_BLOCK
          
          echo "Security group created"
          
          # Create EFS mount targets for the volume in all subnets used in the Fargate profile
          for subnet in $(aws eks describe-fargate-profile \
            --output text --cluster-name ${{env.CLUSTER}} \
            --fargate-profile-name fp-${{env.CLUSTER}}-${{env.NAMESPACE}}  \
            --region ${{env.REGION}}  \
            --query "fargateProfile.subnets"); \
          do (aws efs create-mount-target \
            --file-system-id $EFS_FS_ID \
            --subnet-id $subnet \
            --security-group $EFS_SG_ID \
            --region ${{env.REGION}}); \
          done
          
          echo "EFS mount targets done"

      - name: Create ALB (External Facing)
        if: inputs.shouldCreateALB
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          VPC_ID=$(aws eks describe-cluster --name ${{env.CLUSTER}} --query "cluster.resourcesVpcConfig.vpcId" --region ${{env.REGION}} --output text)
          
          ## Associate OIDC provider
          eksctl utils associate-iam-oidc-provider \
            --region ${{env.REGION}} \
            --cluster ${{env.CLUSTER}} \
            --approve
          
          ## Download the IAM policy document
          curl -S https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v2_ga/docs/install/iam_policy.json -o iam-policy.json
          
          ## Create an IAM policy
          aws iam create-policy \
            --policy-name AWSLoadBalancerControllerIAMPolicy \
            --policy-document file://iam-policy.json
          
          ## Create a service account
          eksctl create iamserviceaccount \
            --cluster=${{env.CLUSTER}} \
            --region ${{env.REGION}} \
            --namespace=kube-system \
            --name=aws-load-balancer-controller \
            --override-existing-serviceaccounts \
            --attach-policy-arn=arn:aws:iam::$ACCOUNT_ID:policy/AWSLoadBalancerControllerIAMPolicy \
            --approve
          
          ## The AWS Load Balancer Controller uses cert-manager
          eksctl create fargateprofile \
            --cluster ${{env.CLUSTER}} \
            --name cert-manager \
            --namespace cert-manager \
            --region $WOF_REGION
          
          ## Install AWS Load Balancer Controller
          helm repo add eks https://aws.github.io/eks-charts
          kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"
          helm install aws-load-balancer-controller \
            eks/aws-load-balancer-controller \
            --namespace kube-system \
            --set clusterName=${{env.CLUSTER}} \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set vpcId=$VPC_ID \
            --set region=${{env.REGION}}
